function [ x, options ] = AdaptiveTimeStepping( x0, T, stepper, varargin )
%ADAPTIVETIMESTEPPING 

%==========================================================================
% Parse Inputs
%==========================================================================
options	=   get_user_options(x0,T,varargin{:});

%==========================================================================
% Perform Adaptive Time Stepping
%==========================================================================
switch upper(options.StepScheme)
    case 'RICHARDSON'
        x	=	AutomaticRichardsonStepping( x0, T, stepper, options );
    otherwise
        warning( 'Unknown StepScheme option ''%s''. Using Richardson.', ...
            options.StepScheme );
        x	=	AutomaticRichardsonStepping( x0, T, stepper, options );
end

end

function x = AutomaticRichardsonStepping( x0, T, stepper, options )

dt	=   options.InitialStep;
m	=   options.SubSteps;
tol	=   options.RelTol;

t	=   0;
ddt	=	dt/m;
x	=   x0;

while t < T
        
    % Take large time step dt
    x_mdt      	=	stepper(x,dt);
    
    % Take m small times steps m*ddt
    x_dt      	=   x;
    for ii = 1:m
        x_dt	=   stepper(x_dt,ddt);
    end
    
    % Compute next time step
    relerr     	=   norm( x_dt - x_mdt );
    ddt_next	=   sqrt( tol * ddt^2 * (m^2-1) / relerr );
    
    % Check for small time steps
    isTooSmall	=   ( ddt_next/ddt < sqrt(options.MinStep/T) );
    isMinStep	=   ( dt == options.MinStep );
    isLastStep	=   || ( T-t < options.MinStep );
    
    if ~isTooSmall || isMinStep
        if isMinStep
            warning( 'Minimum stepsize (%f) reached.', options.MinStep );
        end
        % Update global time
        t	=   t + dt;
        % Update x using 4th order Richardson Extrapolation
        x	=   (m^2/(m^2-1)) .* x_dt - (1/(m^2-1)) .* x_mdt;
    end
    
    % Update time step
    dt	=   m*ddt_next;
    dt	=   max( dt, options.MinStep );
    dt	=   min( dt, options.MaxStep );
    dt	=   min( dt, T-t );
    ddt	=   dt/m;
    
end

end

function options = get_user_options(x0,T,varargin)

if mod(length(varargin),2)
    error( 'Settings must be given as flag/value pairs.' );
end

% Load default options
options     =	struct(	...
    'StepScheme',   'Richardson',   ...
    'AbsTol',       1.0e-3 * norm(x0),  ...
    'RelTol',       1.0e-3,             ...
    'InitialStep',  1.0e-2 * T,         ...
    'MaxStep',      1.0e-1 * T,         ...
    'MinStep',      1.0e-5 * T,         ...
    'SubSteps',     4,                  ...
    'Verbose',      false               ...
    );

% User settings
optfields	=   fields(options);
for ii = 1:2:length(varargin)
    
    flag	=   varargin{ii};
    value	=   varargin{ii+1};
    idx     =   find(strcmpi(flag,optfields),1);
    
    if isempty(idx)
        warning( 'Unknown option ''%s''. Using default.', flag );
    else
        options.(optfields{idx})	=   value;
    end
    
end

end